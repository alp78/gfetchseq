#!/usr/bin/env python
# gfetchseq [interval_file] [genome] [api_key] [yes/no] [yes/no]
import bioblend
from bioblend import galaxy
from bioblend.galaxy import objects
from bioblend.galaxy.tools.inputs import inputs
import json
import csv
import time
import datetime
import logging
import pandas as pd
from sys import argv, exit, stderr
from os import remove, rename, path
from termcolor import colored
from Bio import SeqIO

# genome databases available on Galaxy
dbkeys = ['100', '106', '10616', '10638', '10639', '10645', '10675', '10676', '10679', '10687', '10689', '10690', '10694', '10697', '10784', '10877', '10878', '11752', '12', '12388', '12416', '12468', '12469', '12475', '12508', '12512', '12514', '12521', '12530', '12554', '12607', '12609', '12637', '12716', '12720', '12931', '12950', '12952', '12953', '12997', '13001', '13006', '13030', '13040', '13067', '13082', '13120', '13126', '13127', '13145', '13146', '13151', '13162', '13163', '13217', '13282', '13291', '13355', '13356', '13370', '13378', '13384', '13389', '13403', '13418', '13427', '13435', '13443', '13454', '13462', '13473', '13478', '13485', '13496', '13548', '13551', '13603', '13617', '13623', '13624', '13642', '13643', '13649', '13654', '13655', '13760', '13773', '13875', '13884', '13885', '13887', '13888', '13901', '13908', '13909', '13910', '13911', '13913', '13914', '13915', '13920', '13942', '13943', '13946', '13947', '13953', '13954', '13959', '13960', '13967', '15', '15217', '15596', '15604', '15642', '15644', '15660', '15691', '15708', '15746', '15747', '15749', '15750', '15751', '15754', '15755', '15756', '15757', '15758', '15759', '15760', '15761', '15762', '15766', '15770', '16062', '16067', '16070', '16079', '16081', '16083', '16088', '16095', '16137', '16146', '16148', '16184', '16190', '16203', '16208', '16230', '16235', '16249', '16251', '16252', '16259', '16297', '16304', '16306', '16313', '16319', '16321', '16351', '16363', '16364', '16365', '16366', '16372', '16374', '16375', '16393', '16394', '16400', '16401', '16421', '16523', '16525', '16549', '16645', '16646', '16700', '16719', '16720', '16721', '16723', '16791', '16800', '16817', '16820', '16841', '16871', '17053', '17057', '17109', '17153', '17155', '17159', '17161', '17163', '17227', '17237', '17249', '17265', '17343', '17375', '17403', '17407', '17413', '17415', '17417', '17445', '17455', '17457', '17459', '17477', '17491', '176', '17629', '17639', '17643', '17679', '17729', '178', '17811', '17823', '17929', '17953', '18007', '18059', '18083', '18255', '18267', '18271', '184', '18459', '18509', '18633', '18637', '18789', '18797', '18801', '18809', '18817', '18883', '189', '18963', '18965', '18981', '190', '19065', '19087', '19135', '19193', '19227', '19259', '19265', '193', '19469', '19485', '19489', '19517', '19519', '19521', '19543', '19575', '19617', '19619', '19639', '19857', '19943', '19979', '20039', '20079', '20083', '20197', '20241', '20243', '20371', '20391', '21047', '213', '220', '223', '228', '229', '237', '238', '241', '247', '25', '250', '256', '257', '259', '26', '264', '265', '266', '267', '270', '276', '277', '278', '27803', '27835', '27853', '279', '28035', '28109', '28111', '28135', '28247', '283', '285', '28505', '28507', '28583', '28585', '286', '28743', '288', '28921', '297', '301', '304', '306', '307', '31', '311', '312', '314', '320', '323', '325', '326', '327', '329', '330', '333', '334', '336', '344', '355', '359', '370', '377', '38', '384', '386', '388', '4', '401', '402', '403', '404', '408', '409', '42', '420', '43', '44', '46', '59', '63', '64', '66', '74', '77', '78', '79', '81', '82', '84', '85', '87', '88', '89', '90', '91', '92', '95', '9618', '9619', '9636', '9638', '99', '?', 'AaegL1', 'AgamP3', 'Amel_4.5', 'Arabidopsis_thaliana_TAIR10', 'Araly1', 'Bombyx_mori_p50T_2.0', 'CHM1', 'CpipJ1', 'GRCm38B', 'Homo_sapiens_AK1', 'Homo_sapiens_nuHg19_mtrCRS', 'Hydra_JCVI', 'IscaW1', 'PhumU1', 'Ptrichocarpa_156', 'Saccharomyces_cerevisiae_S288C_SGD2010', 'Schizosaccharomyces_pombe_1.1', 'Spur_v2.6', 'Sscrofa9.58', 'Tcacao_1.0', 'Tcas_3.0', 'Xanthomonas_oryzae_PXO99A', 'Zea_mays_B73_RefGen_v2', 'aciBauTYTH_1', 'acidBact_ELLIN345', 'acidCell_11B', 'acidCryp_JF_5', 'acidJS42', 'acinSp_ADP1', 'actiPleu_L20', 'aerPer1', 'aeroHydr_ATCC7966', 'afrOth13', 'ailMel1', 'alcaBork_SK2', 'alkaEhrl_MLHE_1', 'allMis0', 'allMis1', 'amaVit1', 'ambMex1', 'ambMex2', 'anaPla1', 'anabVari_ATCC29413', 'anaeDeha_2CP_C', 'anapMarg_ST_MARIES', 'ancCey1', 'anoCar1', 'anoCar2', 'anoGam1', 'anoGam3', 'aotNan1', 'apaSpi1', 'apiMel1', 'apiMel2', 'apiMel3', 'apiMel4', 'aplCal0', 'aplCal1', 'aptMan1', 'aquChr1', 'aquChr2', 'aquiAeol', 'araMac1', 'araTha1', 'arabidopsis', 'arabidopsis_tair8', 'archFulg1', 'arthFB24', 'ascSuu1', 'astCal1', 'astMex1', 'azoaSp_EBN1', 'azorCaul2', 'baciAnth_AMES', 'baciHalo', 'baciSubt', 'bactThet_VPI_5482', 'balAcu1', 'bartHens_HOUSTON_1', 'baumCica_HOMALODISCA', 'bdelBact', 'bifiLong', 'bioGla0', 'bisBis1', 'blocFlor', 'borEut13', 'bordBron', 'borrBurg', 'bosMut1', 'bosTau2', 'bosTau3', 'bosTau4', 'bosTau5', 'bosTau6', 'bosTau7', 'bosTau8', 'bosTau9', 'bosTauMd3', 'braFlo1', 'braFlo2', 'bradJapo', 'bruMal1', 'bruMal2', 'brucMeli', 'bubBub1', 'buchSp', 'bunEbo1', 'burXyl1', 'burk383', 'burkCeno_AU_1054', 'burkCeno_HI2424', 'burkCepa_AMMD', 'burkMall_ATCC23344', 'burkPseu_1106A', 'burkThai_E264', 'burkViet_G4', 'burkXeno_LB400', 'cacTus1', 'cacTus2', 'cacTus3', 'caeAng1', 'caeAng2', 'caeJap1', 'caeJap2', 'caeJap3', 'caeJap4', 'caePb1', 'caePb2', 'caePb3', 'caeRem1', 'caeRem2', 'caeRem3', 'caeRem4', 'caeSp111', 'caeSp51', 'caeSp71', 'caeSp91', 'calJac1', 'calJac3', 'calMil0', 'calMil1', 'caldMaqu1', 'caldSacc_DSM8903', 'camFer1', 'campFetu_82_40', 'campJeju', 'campJeju_81_176', 'campJeju_RM1221', 'canFam1', 'canFam2', 'canFam3', 'canFamPoodle1', 'canHg12', 'candCars_RUDDII', 'candPela_UBIQUE_HTCC1', 'capHir1', 'carbHydr_Z_2901', 'casCan1', 'catArr1', 'caulCres', 'cavApe1', 'cavPor3', 'cb1', 'cb2', 'cb3', 'cb4', 'ce10', 'ce11', 'ce2', 'ce3', 'ce4', 'ce5', 'ce6', 'ce7', 'ce8', 'ce9', 'cebCap1', 'centromeres1', 'cerAty1', 'cerSim1', 'chaVoc1', 'cheMyd1', 'chiLan1', 'chlSab1', 'chlSab2', 'chlaPneu_CWL029', 'chlaTrac', 'chloChlo_CAD3', 'chloTepi_TLS', 'choHof1', 'chrAsi1', 'chrPic1', 'chrPic2', 'chroSale_DSM3043', 'chroViol', 'ci1', 'ci2', 'ci3', 'cioSav1', 'cioSav2', 'clavMich_NCPPB_382', 'colAng1', 'colLiv1', 'colwPsyc_34H', 'conCri1', 'coryEffi_YS_314', 'cotJap1', 'cotJap2', 'coxiBurn', 'criGri1', 'criGriChoV1', 'criGriChoV2', 'croPor0', 'cynSem1', 'cypVar1', 'cytoHutc_ATCC33406', 'danRer10', 'danRer11', 'danRer3', 'danRer4', 'danRer5', 'danRer6', 'danRer7', 'dasNov1', 'dasNov2', 'dasNov3', 'dechArom_RCB', 'dehaEthe_195', 'deinGeot_DSM11300', 'deinRadi', 'desuHafn_Y51', 'desuPsyc_LSV54', 'desuRedu_MI_1', 'desuVulg_HILDENBOROUG', 'dicLab1', 'dichNodo_VCS1703A', 'dipOrd1', 'dipOrd2', 'dirImm1', 'dm1', 'dm2', 'dm3', 'dm6', 'dp2', 'dp3', 'dp4', 'droAlb1', 'droAna1', 'droAna2', 'droAna3', 'droBia2', 'droBip2', 'droEle2', 'droEre1', 'droEre2', 'droEug2', 'droFic2', 'droGri1', 'droGri2', 'droKik2', 'droMir2', 'droMoj1', 'droMoj2', 'droMoj3', 'droPer1', 'droPse3', 'droRho2', 'droSec1', 'droSim1', 'droSim2', 'droSuz1', 'droTak2', 'droVir1', 'droVir2', 'droVir3', 'droWil1', 'droWil2', 'droYak1', 'droYak2', 'droYak3', 'eboVir1', 'eboVir2', 'eboVir3', 'echTel1', 'echTel2', 'ecoRef1', 'ecoRef2', 'ecoRef3', 'ecoRef4', 'ehrlRumi_WELGEVONDEN', 'eidHel1', 'eleEdw1', 'ente638', 'enteFaec_V583', 'eptFus1', 'equCab1', 'equCab2', 'equCab3', 'equPrz1', 'eriEur1', 'eriEur2', 'erwiCaro_ATROSEPTICA', 'erytLito_HTCC2594', 'eschColi_APEC_O1', 'eschColi_CFT073', 'eschColi_EC4115', 'eschColi_K12', 'eschColi_O157H7', 'eschColi_TW14359', 'esoLuc1', 'euaGli13', 'eulFla1', 'eulMac1', 'eutHer13', 'evoSim1', 'falChe1', 'falciparum', 'felCat3', 'felCat4', 'felCat5', 'felCat8', 'felCat9', 'ficAlb1', 'ficAlb2', 'flavJohn_UW101', 'fr1', 'fr2', 'fr3', 'franCcI3', 'franTula_TULARENSIS', 'fukDam1', 'fusoNucl', 'gadMor1', 'galGal2', 'galGal3', 'galGal4', 'galGal5', 'galGal6', 'galVar1', 'gasAcu1', 'gavGan0', 'geoFor1', 'geobKaus_HTA426', 'geobMeta_GS15', 'geobSulf', 'geobTher_NG80_2', 'geobUran_RF4', 'gliRes13', 'gloeViol', 'glucOxyd_621H', 'gorGor1', 'gorGor2', 'gorGor3', 'gorGor4', 'gorGor5', 'gramFors_KT0803', 'granBeth_CGDNIH1', 'grcH37P13', 'grcH38P11', 'grcH38P12', 'grcHhh38', 'haeCon1', 'haeCon2', 'haemInfl_KW20', 'haemSomn_129PT', 'haheChej_KCTC_2396', 'halMar1', 'haloHalo1', 'haloHalo_SL1', 'haloWals1', 'hapBur1', 'hbv1', 'heliAcin_SHEEBA', 'heliHepa', 'heliPylo_26695', 'heliPylo_HPAG1', 'heliPylo_J99', 'hermArse', 'hetBac1', 'hetGla1', 'hetGla2', 'hg15', 'hg16', 'hg17', 'hg18', 'hg19', 'hg19Haps', 'hg19LggInv', 'hg19Patch10', 'hg19Patch13', 'hg19Patch2', 'hg19Patch5', 'hg19Patch9', 'hg19_rCRS_pUC18_phiX174', 'hg38', 'hg38Patch11', 'hg38Patch2', 'hg38Patch3', 'hg38Patch5', 'hg38Patch6', 'hg38Patch7', 'hg38Patch9', 'hg_g1k_v37', 'hlaRef1', 'hlaRef2', 'hlaRef3', 'homIni13', 'homIni14', 'homIni20', 'homPan20', 'hpv1', 'hypeButy1', 'hyphNept_ATCC15444', 'idioLoih_L2TR', 'jacJac1', 'jannCCS1', 'kirRef', 'kirRefV2', 'kirRefV3', 'kirRefV4', 'kirRefV5', 'lMaj5', 'lactLact', 'lactPlan', 'lactSali_UCC118', 'latCha1', 'lauRas13', 'lawsIntr_PHE_MN1_00', 'legiPneu_PHILADELPHIA', 'leifXyli_XYLI_CTCB0', 'lepOcu1', 'lepWed1', 'leptInte', 'leucMese_ATCC8293', 'lipVex1', 'listInno', 'loaLoa1', 'lotGig0', 'loxAfr1', 'loxAfr2', 'loxAfr3', 'macEug1', 'macEug2', 'macFas5', 'macNem1', 'magnMC1', 'magnMagn_AMB_1', 'manLeu1', 'manPen1', 'manVit1', 'mannSucc_MBEL55E', 'marVir1', 'mariAqua_VT8', 'mariMari_MCS10', 'mayZeb1', 'mculMari1', 'megLyr1', 'melGal1', 'melGal5', 'melHap1', 'melInc1', 'melInc2', 'melUnd1', 'mesAur1', 'mesoFlor_L1', 'mesoLoti', 'metAce1', 'metMar1', 'metaSedu', 'methAeol1', 'methBark1', 'methBoon1', 'methBurt2', 'methCaps_BATH', 'methFlag_KT', 'methHung1', 'methJann1', 'methKand1', 'methLabrZ_1', 'methMari_C5_1', 'methMari_C7', 'methMaze1', 'methPetr_PM1', 'methSmit1', 'methStad1', 'methTher1', 'methTherPT1', 'methVann1', 'mhcRef', 'mhcRefnoNs', 'mhcRefnoNs10', 'mhcRefnoNs11', 'mhcRefnoNs12', 'mhcRefnoNs13', 'mhcRefnoNs14', 'mhcRefnoNs15', 'mhcRefnoNs16', 'mhcRefnoNs17', 'mhcRefnoNs18', 'mhcRefnoNs19', 'mhcRefnoNs2', 'mhcRefnoNs20', 'mhcRefnoNs21', 'mhcRefnoNs22', 'mhcRefnoNs23', 'mhcRefnoNs24', 'mhcRefnoNs3', 'mhcRefnoNs4', 'mhcRefnoNs5', 'mhcRefnoNs6', 'mhcRefnoNs7', 'mhcRefnoNs8', 'mhcRefnoNs9', 'micMur1', 'micMur2', 'micMur3', 'micOch1', 'mm10', 'mm10Patch1', 'mm10Patch4', 'mm10Strains1', 'mm5', 'mm7', 'mm8', 'mm9', 'mmtv', 'monDom1', 'monDom4', 'monDom5', 'moorTher_ATCC39073', 'musDom2', 'musFur1', 'mycoGeni', 'mycoTube_H37RV', 'myoBra1', 'myoDav1', 'myoLuc1', 'myoLuc2', 'myxoXant_DK_1622', 'nanEqu1', 'nanGal1', 'nanPar1', 'nasLar1', 'natrPhar1', 'necAme1', 'neisGono_FA1090_1', 'neisMeni_FAM18_1', 'neisMeni_MC58_1', 'neisMeni_Z2491_1', 'nemVec1', 'neoBri1', 'neoSch1', 'neorSenn_MIYAYAMA', 'nitrEuro', 'nitrMult_ATCC25196', 'nitrOcea_ATCC19707', 'nitrWino_NB_255', 'nocaFarc_IFM10152', 'nocaJS61', 'nomLeu1', 'nomLeu2', 'nomLeu3', 'nonAfr13', 'nostSp', 'notCor1', 'novoArom_DSM12444', 'oceaIhey', 'ochPri2', 'ochPri3', 'octDeg1', 'odoRosDiv1', 'oenoOeni_PSU_1', 'oncVol1', 'onioYell_PHYTOPLASMA', 'orcOrc1', 'oreNil1', 'oreNil2', 'oreNil3', 'orieTsut_BORYONG', 'ornAna1', 'ornAna2', 'oryAfe1', 'oryCun1', 'oryCun2', 'oryLat1', 'oryLat2', 'oryza_sativa_japonica_nipponbare_IRGSP4.0', 'otoGar1', 'otoGar3', 'oviAri1', 'oviAri3', 'oviAri4', 'oxyTri2', 'pUC18', 'panHod1', 'panPan1', 'panPan2', 'panRed1', 'panTig1', 'panTro1', 'panTro2', 'panTro3', 'panTro4', 'panTro5', 'panTro6', 'papAnu2', 'papAnu3', 'papAnu4', 'papHam1', 'paraDeni_PD1222', 'paraSp_UWE25', 'pastMult', 'pediPent_ATCC25745', 'pelSin1', 'peloCarb', 'peloLute_DSM273', 'peloTher_SI', 'perManBai1', 'petMar1', 'petMar2', 'petMar3', 'phiX', 'photLumi', 'photProf_SS9', 'phyCat1', 'picrTorr1', 'pireSp', 'plasFalc3D7V12', 'poeFor1', 'poeRet1', 'polaJS66', 'polyQLWP', 'ponAbe2', 'ponAbe3', 'porpGing_W83', 'priExs1', 'priMat13', 'priPac1', 'priPac2', 'priPac3', 'proCap1', 'proCoq1', 'procMari_CCMP1375', 'propAcne_KPA171202', 'pseHum1', 'pseuAeru', 'pseuHalo_TAC125', 'psycArct_273_4', 'psycIngr_37', 'pteAle1', 'ptePar1', 'pteVam1', 'punNye1', 'pyrAby1', 'pyrAer1', 'pyrFur2', 'pyrHor1', 'pyroArse1', 'pyroCali1', 'pyroIsla1', 'ralsEutr_JMP134', 'ralsSola', 'regenRn0', 'repBase0', 'repBase1', 'repeats2', 'resEbo1', 'rheMac10', 'rheMac2', 'rheMac3', 'rheMac7', 'rheMac8', 'rhiBie1', 'rhiFer1', 'rhiRox1', 'rhizEtli_CFN_42', 'rhodPalu_CGA009', 'rhodRHA1', 'rhodRubr_ATCC11170', 'rhodSpha_2_4_1', 'rickBell_RML369_C', 'rn3', 'rn4', 'rn5', 'rn6', 'rodEnt13', 'roseDeni_OCH_114', 'rouAeg1', 'rubrXyla_DSM9941', 'sacCer1', 'sacCer2', 'sacCer3', 'saccDegr_2_40', 'saccEryt_NRRL_2338', 'saiBol1', 'saliRube_DSM13855', 'saliTrop_CNB_440', 'salmEnte_PARATYPI_ATC', 'salmTyph', 'salmTyph_TY2', 'sarHar1', 'sc1', 'sebNig1', 'sebRub1', 'shewANA3', 'shewAmaz', 'shewBalt', 'shewDeni', 'shewFrig', 'shewLoihPV4', 'shewMR4', 'shewMR7', 'shewOnei', 'shewPutrCN32', 'shewW318', 'shigFlex_2A', 'siliPome_DSS_3', 'simHumanMam', 'simHumanMammal', 'simHumanPrim', 'simRefMam', 'sinoMeli', 'sodaGlos_MORSITANS', 'soliUsit_ELLIN6076', 'sorAra1', 'sorAra2', 'speTri1', 'speTri2', 'sphiAlas_RB2256', 'staAur1', 'staAur2', 'stapAure_MU50', 'stapMari1', 'stePar1', 'strPur1', 'strPur2', 'strPur3', 'strPur4', 'strRat1', 'strRat2', 'streCoel', 'strePyog_M1_GAS', 'sudEbo1', 'sulSol1', 'sulfAcid1', 'sulfToko1', 'susScr1', 'susScr11', 'susScr2', 'susScr3', 'symbTher_IAM14863', 'synePCC6', 'syneSp_WH8102', 'syntAcid_SB', 'syntFuma_MPOB', 'syntWolf_GOETTINGEN', 'taeGut1', 'taeGut2', 'taiEbo1', 'takFla1', 'tarIhg38', 'tarSyr1', 'tarSyr2', 'tetNig1', 'tetNig2', 'thaSir1', 'therAcid1', 'therElon', 'therFusc_YX', 'therKoda1', 'therMari', 'therPend1', 'therPetr_RKU_1', 'therTeng', 'therTher_HB27', 'therTher_HB8', 'therVolc1', 'thioCrun_XCL_2', 'thioDeni_ATCC25259', 'thioDeni_ATCC33889', 'tinGut1', 'trepPall', 'triCas2', 'triMan1', 'triSpi1', 'triSui1', 'tricEryt_IMS101', 'tropWhip_TW08_27', 'tupBel1', 'tupChi1', 'turTru1', 'turTru2', 'uncuMeth_RCI', 'ureaUrea', 'ursMar1', 'venter1', 'vermEise_EF01_2', 'vibrChol1', 'vibrChol_O395_1', 'vibrFisc_ES114_1', 'vibrPara1', 'vibrVuln_CMCP6_1', 'vibrVuln_YJ016_1', 'vicPac1', 'vicPac2', 'wiggBrev', 'wolbEndo_OF_DROSOPHIL', 'woliSucc', 'xantCamp', 'xenLae2', 'xenTro1', 'xenTro2', 'xenTro3', 'xenTro7', 'xenTro9', 'xipMac1', 'xyleFast', 'yersPest_CO92', 'zaiEbo1', 'zonAlb1', 'zymoMobi_ZM4']


def convert_interval_to_bed(interval_file):
    records_list = []
    with open(interval_file, 'rt') as f:
        content = csv.reader(f, delimiter='\t')
        for line in content:
            records_list.append(line)
    bed_list = []
    # CASE: genName	 genStart	genEnd
    if len(records_list[1]) == 3:
        for record in records_list[1:]:
            if (len(record)) == 3:
                line = [record[0], record[1], record[2]]
            bed_list.append(line)
    # CASE: genName	 genStart	genEnd  Strand
    if (len(records_list[1]) == 4) and (records_list[1][3] == '-' or records_list[1][3] == '+'):
        for record in records_list[1:]:
            if (len(record)) == 4:
                line = [record[0], record[1], record[2], 'n/a', 0, record[3]]
            bed_list.append(line)
    # CASE: genName	 genStart	genEnd  repName
    if (len(records_list[1]) == 4) and (records_list[1][3] != '-' and records_list[1][3] != '+'):
        for record in records_list[1:]:
            if (len(record)) == 4:
                line = [record[0], record[1], record[2], record[3]]
            bed_list.append(line)
    # CASE: genName	 genStart	genEnd  Strand  repName           
    if (len(records_list[1]) == 5) and (records_list[1][3] == '-' or records_list[1][3] == '+'):
        for record in records_list[1:]:
            if (len(record)) == 5: 
                line = [record[0], record[1], record[2], record[4], 0, record[3]]
            bed_list.append(line)
    # CASE: genName	 genStart	genEnd  repName   Strand      
    if (len(records_list[1]) == 5) and (records_list[1][4] == '-' or records_list[1][4] == '+'):
        for record in records_list[1:]:
            if (len(record)) == 5: 
                line = [record[0], record[1], record[2], record[3], 0, record[4]]
            bed_list.append(line)
    bed_filename = f'{interval_file[:-9]}.bed'
    with open(bed_filename, 'wt') as f:
        writer = csv.writer(f, delimiter='\t')
        writer.writerows(bed_list)
    logger.info(f"Converted {colored(interval_file, 'yellow')} to {colored(bed_filename, 'green')}")
    return bed_filename

def upload_bedfile_and_get_dataset(_hist, _file, _type, _genome):
    logger.info(f"Uploading {colored(_file, 'green')} to Galaxy...")
    start = time.time()
    job = gi.tools.upload_file(_file, _hist, file_type=_type, dbkey=_genome, space_to_tab=True)
    job_id = job['jobs'][0]['id']
    while True:
        job_state = gi.jobs.get_state(job_id)
        if job_state == 'ok':
            break
        time.sleep(30)
    end = time.time()
    job_time = f'{str(datetime.timedelta(seconds=int(end - start)))}'
    logger.info(f"File uploaded in {colored(job_time, 'yellow')}")
    logger.info(colored('Retrieving Dataset...' , 'blue'))
    try:
        gio = objects.GalaxyInstance(gurl, gkey)
        dataset = gio.histories.list()[0].get_datasets()[-1]
    except Exception as e:
        logger.info(f'{colored("Problem processing the dataset on Galaxy server", "red")}')
        logger.info(f'{colored(f"Please retry...", "yellow")}')
        exit(0)        

    return dataset

def fetch_sequences_and_get_dataset_id(dataset):
    start = time.time()
    logger.info(f"Fetching DNA sequences from {colored(dataset.genome_build, 'green')} in {colored('fasta', 'green')} format...")
    dataset_name = dataset.name
    dataset_id = dataset.id
    hist_id = dataset.container_id
    tool_id = 'Extract genomic DNA 1'
    tool_input = inputs().set_dataset_param(dataset_name, dataset_id, src="hda")
    job = gi.tools.run_tool(history_id = hist_id, tool_id = tool_id, tool_inputs = tool_input)
    job_id = job['jobs'][0]['id']
    dataset_id = job['outputs'][0]['id']
    while True:
        job_state = gi.jobs.get_state(job_id)
        if job_state == 'ok':
            break
        time.sleep(30)
    end = time.time()
    job_time = f'{str(datetime.timedelta(seconds=int(end - start)))}'
    logger.info(f"Extraction completed in {colored(job_time, 'yellow')}")
    return dataset_id

def download_fasta(dataset_id, fasta_file):
    start = time.time()
    fasta_res = gi.datasets.download_dataset(dataset_id, file_path=fasta_file, use_default_filename=False)
    logger.info(f"Downloading {colored(fasta_res, 'green')} to current folder...")
    end = time.time()
    dl_time = f'{str(datetime.timedelta(seconds=int(end - start)))}'
    logger.info(f"Downloading completed in {colored(dl_time, 'yellow')}")

def fasta_to_upper(fasta_file):
    if argv[4] == 'yes':
        records = (rec.upper() for rec in SeqIO.parse(fasta_file, "fasta"))
        out_file = f'{fasta_file[:-6]}_upper.fasta'
        count = SeqIO.write(records, out_file, "fasta")
        logger.info(f"Converted {colored(count, 'yellow')} records to upper case")
        remove(fasta_file)
    else:
        out_file = f'{fasta_file[:-6]}_upper.fasta'
        rename(fasta_file, out_file)
    return out_file
    
def fasta_format_id(bed_file, fasta_file):
    df = pd.read_csv(bed_file, sep='\t', skiprows=(0), header=None)
    index = 0
    records = []

    # CASE: geName, genStart, genEnd
    if len(df.columns) == 3:
        for record in SeqIO.parse(fasta_file, "fasta"):
            g_name = df.loc[index, 0]
            g_start = str(df.loc[index, 1])
            g_end = str(df.loc[index, 2])
            if '+' in record.id:
                g_strand = '+'
            else:
                g_strand = '-'
            record.id = f"{g_name}_{g_start}-{g_end}{g_strand}"
            record.name = f""
            record.description = f""
            records.append(record)
            index += 1

    # CASE: genName	 genStart	genEnd  repName
    if len(df.columns) == 4:
        for record in SeqIO.parse(fasta_file, "fasta"):
            g_name = df.loc[index, 0]
            g_start = str(df.loc[index, 1])
            g_end = str(df.loc[index, 2])
            r_name = df.loc[index, 3]
            if '+' in record.id:
                g_strand = '+'
            else:
                g_strand = '-'
            record.id = f"{g_name}_{g_start}-{g_end}_{r_name}{g_strand}"
            record.name = f""        
            record.description = f"[{index+1}] {r_name}"
            records.append(record)
            index += 1

    # CASE: geName, genStart, genEnd, repName, Score, Strand
    if len(df.columns) == 6:
        for record in SeqIO.parse(fasta_file, "fasta"):
            g_name = df.loc[index, 0]
            g_start = str(df.loc[index, 1])
            g_end = str(df.loc[index, 2])
            r_name = df.loc[index, 3]
            g_strand = df.loc[index, 5]
            record.id = f"{g_name}_{g_start}-{g_end}_{r_name}{g_strand}"
            record.name = f""
            record.description = f""
            records.append(record)
            index += 1

    out_file = f'{fasta_file[:-6]}_fid.fasta'
    with open(out_file, "w") as output_handle:
        SeqIO.write(records, output_handle, "fasta")
    remove(fasta_file)
    final_file = f'{out_file[:-16]}.fasta'
    rename(out_file, final_file)
    logger.info("Formatted fasta records IDs")

def clean_history(hist_id, dataset_id_list):
    start = time.time()
    logger.info(f'{colored("Removing files from Galaxy...", "blue")}')

    for ds in dataset_id_list:
        gi.histories.delete_dataset(hist_id, ds, purge=True)
    end = time.time()
    purge_time = f'{str(datetime.timedelta(seconds=int(end - start)))}'
    logger.info(f"Purge completed in {colored(purge_time, 'yellow')}")

# PROGRAM START

# setting up logger
logger = logging.getLogger()
logger.setLevel(logging.INFO)
formatter = logging.Formatter('%(message)s')
ch = logging.StreamHandler()
ch.setLevel(logging.INFO)
ch.setFormatter(formatter)
logger.addHandler(ch)


# check if arguments are healthy
in_file = argv[1]

if len(argv) < 6:
    logger.info(f'{colored("Argument missing", "red")}')
    logger.info(f'{colored("gfetchseq [interval_file] [genome] [api_key] [yes/no] [yes/no]", "green")}')
    exit(0)

if len(argv) > 6:
    logger.info(f'{colored("Too many arguments", "red")}')
    logger.info(f'{colored("gfetchseq [interval_file] [genome] [api_key] [upper? yes/no] [purge? yes/no]", "green")}')
    exit(0)

if in_file[-9:] != '.interval':
    logger.info(f'{colored("Not a valid .interval file extension", "red")}')
    logger.info(f'{colored("example.interval", "green")}')
    exit(0)

if (len(argv) == 6 and (argv[4] != 'yes') and (len(argv) == 6 and argv[4] != 'no')) or ((len(argv) == 6 and argv[5] != 'yes') and (len(argv) == 6 and argv[5] != 'no')):
    logger.info(f'{colored("Invalid flag argument", "red")}')
    logger.info(f'{colored("gfetchseq [interval_file] [genome] [api_key] [upper? yes/no] [purge? yes/no]", "green")}')
    exit(0)

if not path.isfile(in_file):
    logger.info(f'{colored("Cannot find interval file in current folder", "red")}')
    exit(0)

# check if genome arg is in the list
if argv[2] not in dbkeys:
    logger.info(f'{colored("Genome invalid", "red")}')
    logger.info(f'{colored(f"Check dkeys file {dbkeys[:5]}...", "green")}')
    exit(0)

# check if interval file content is healthy
records_list = []
with open(in_file, 'rt') as f:
    content = csv.reader(f, delimiter='\t')
    index = 0
    for line in content:
        records_list.append(line)
        if index == 3:
            break
        index += 1
if len(records_list[1]) < 3:
    logger.info(f"{colored('Invalid content in interval file', 'red')}")
    logger.info(f'Must have min 3 columns: {colored("genName  genStart  genEnd", "green")}  {colored("Strand  repName", "yellow")}')
    exit(0)

if (len(records_list[1][1]) == 0 or len(records_list[1][2]) == 0):
    logger.info(f"{colored('Coordinates in interval file are invalid', 'red')}")
    logger.info(f'Example: {colored("chr1 100662981 100669420", "green")} {colored(" - L1PA4", "yellow")}')
    exit(0)

full_start = time.time()

logger.info(f'{colored("Connecting to Galaxy server...", "blue")}')

# initialize both galaxy clients (tools and objects)
try:
    gkey = argv[3]
    gurl = 'https://usegalaxy.org'
    gi = galaxy.GalaxyInstance(gurl, gkey)
    guser = gi.users.get_current_user()['username']
except bioblend.ConnectionError as bce:
    logger.info(f'{colored("Cannot connect to Galaxy", "red")}')
    logger.info(f'{colored(f"{bce.body}...", "yellow")}')
    exit(0)

logger.info(f"Connected to user account {colored(guser, 'red')}")

bed_file = convert_interval_to_bed(in_file)

_hist = gi.histories.get_histories()[0]['id']
_type = 'bed'
_genome = argv[2]

dataset = upload_bedfile_and_get_dataset(_hist, bed_file, _type, _genome)

dataset_id = dataset.id

output_id = fetch_sequences_and_get_dataset_id(dataset)

fasta_file = f'{bed_file[:-4]}.fasta'
download_fasta(output_id, fasta_file)

logger.info(colored('Formatting fasta file...', 'blue'))

upper_fasta = fasta_to_upper(fasta_file)
fasta_format_id(bed_file, upper_fasta)

id_list = [dataset_id, output_id]

if argv[5] == 'yes':
    clean_history(_hist, id_list)

full_end = time.time()
full_time = f'{str(datetime.timedelta(seconds=int(full_end - full_start)))}'
logger.info(f"Full process completed in {colored(full_time, 'yellow')}")
del formatter
del ch
del logger
